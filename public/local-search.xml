<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Setup WSL and work seaminglessly</title>
    <link href="/blog/2024/02/16/Setup-WSL-and-work-seaminglessly/"/>
    <url>/blog/2024/02/16/Setup-WSL-and-work-seaminglessly/</url>
    
    <content type="html"><![CDATA[<h1 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h1><p>Edit <code>/etc/wsl.conf</code> and add</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">[network]<br>generateResolvConf = false<br></code></pre></td></tr></table></figure><p>Reboot computer and edit <code>/etc/resolv.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/resolv.conf<br>nameserver 9.9.9.9<br>nameserver 1.1.1.1<br></code></pre></td></tr></table></figure><h1 id="File-system"><a href="#File-system" class="headerlink" title="File system"></a>File system</h1><p>Edit <code>/etc/wsl.conf</code> and add</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf"># /etc/wsl.conf<br>[automount]<br>enabled = true <br># C-drive would be mounted to /c, rather than the default /mnt/c. <br>root = /<br></code></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://learn.microsoft.com/en-us/windows/wsl/wsl-config">https://learn.microsoft.com/en-us/windows/wsl/wsl-config</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Windows11 Without Microsoft Account or Internet Access</title>
    <link href="/blog/2023/12/16/install-windows-11-without-microsoft-account/"/>
    <url>/blog/2023/12/16/install-windows-11-without-microsoft-account/</url>
    
    <content type="html"><![CDATA[<p>Starting from Windows11, Microsoft require you to connect to Internet and log-in your Microsoft account during installation.</p><p>To bypass that:</p><ol><li><p>Make sure the machine is not conncted to Ethernet.</p></li><li><p>Press <code>Shift</code> + <code>F10</code> and you should see a CMD terminal pops up.</p></li><li><p>Type <code>oobe\bypassnro</code> and press Enter.</p></li><li><p>The computer will reboot and restart the installation. This time there would be an “I don’t have Internet” option, and we can create a local account instead of log-in to Microsoft.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>privacy &amp; anonymity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Daily Use of GPG</title>
    <link href="/blog/2023/12/16/daily-use-of-gpg/"/>
    <url>/blog/2023/12/16/daily-use-of-gpg/</url>
    
    <content type="html"><![CDATA[<h1 id="Prepare-GPG-keys"><a href="#Prepare-GPG-keys" class="headerlink" title="Prepare GPG keys"></a>Prepare GPG keys</h1><h2 id="Generate-new-keys"><a href="#Generate-new-keys" class="headerlink" title="Generate new keys"></a>Generate new keys</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --gen-key<br></code></pre></td></tr></table></figure><p>Or you can use <code>--full-gen-key</code> to set encryption algorithm, key size, and expiry date.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --full-gen-key <br></code></pre></td></tr></table></figure><p>Sample output</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">Please select what kind of key you want:<br>   (1) RSA and RSA (default)<br>   (2) DSA and Elgamal<br>   (3) DSA (sign only)<br>   (4) RSA (sign only)<br>  (14) Existing key from card<br>Your selection? 1<br>RSA keys may be between 1024 and 4096 bits long.<br>What keysize do you want? (3072)<br>Requested keysize is 3072 bits<br>Please specify how long the key should be valid.<br>         0 = key does not expire<br>      &lt;n&gt;  = key expires in n days<br>      &lt;n&gt;w = key expires in n weeks<br>      &lt;n&gt;m = key expires in n months<br>      &lt;n&gt;y = key expires in n years<br>Key is valid for? (0) 0<br>Key does not expire at all<br>Is this correct? (y/N) y<br></code></pre></td></tr></table></figure><h2 id="List-all-keys"><a href="#List-all-keys" class="headerlink" title="List all keys"></a>List all keys</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --list-key --keyid-format long<br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">/home/user/.gnupg/pubring.kbx<br>----------------------------<br>pub   rsa3072/84C9694F05E46BFA 2023-12-16 [SC]<br>              ^^^^^^^^^^^^^^^^ This is key ID<br>      8A4111386A906867172C760684C9694F05E46BFA<br>uid                 [ultimate] Firstname Lastname (comment) &lt;example@gmail.com&gt;<br>sub   rsa3072/B848B278A951A079 2023-12-16 [E]<br></code></pre></td></tr></table></figure><h2 id="Backup-keys"><a href="#Backup-keys" class="headerlink" title="Backup keys"></a>Backup keys</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --armor --export-options backup --export-secret-keys KEY_ID_OR_EMAIL &gt; private.gpg <br></code></pre></td></tr></table></figure><p>Options are </p><ul><li><code>--armor</code> to output ASCII-based keys instead of binary format</li><li><code>--export-options backup</code> to include meta data like ownertrust, signature, and user attributes.</li></ul><h2 id="Import-keys-from-backup"><a href="#Import-keys-from-backup" class="headerlink" title="Import keys from backup"></a>Import keys from backup</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ gpg --import-options restore --import private.gpg<br>$ gpg --edit-key your@id.here<br>gpg&gt; trust<br>Your decision? 5<br></code></pre></td></tr></table></figure><h1 id="Share-public-key-with-others"><a href="#Share-public-key-with-others" class="headerlink" title="Share public key with others"></a>Share public key with others</h1><p>Some people post their public keys on their website. Some place it under <code>&lt;domain&gt;/.well-known/security.txt</code> or <code>&lt;domain&gt;/security.txt</code>.</p><h2 id="Export-your-key"><a href="#Export-your-key" class="headerlink" title="Export your key"></a>Export your key</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ gpg --armor --<span class="hljs-built_in">export</span> email@example.com<br><br>-----BEGIN PGP PUBLIC KEY BLOCK-----<br><br>6HV8Q6put7QEsRjBq89z3Eh+H9XLBz9GXpGBs2J6C3gu2+hBzgagNxfJeMP45zJi<br>mQGNBGVQYHkBDADF1JkfvUEeZxp+dKxRpAELB7uAjOqkf305twVozoMv3ky76jqW<br>...<br>-----END PGP PUBLIC KEY BLOCK-----<br></code></pre></td></tr></table></figure><h2 id="Import-keys-of-others"><a href="#Import-keys-of-others" class="headerlink" title="Import keys of others"></a>Import keys of others</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --import public.gpg<br></code></pre></td></tr></table></figure><h1 id="Use-with-Git"><a href="#Use-with-Git" class="headerlink" title="Use with Git"></a>Use with Git</h1><h2 id="Sign-Git-commit-and-tags"><a href="#Sign-Git-commit-and-tags" class="headerlink" title="Sign Git commit and tags"></a>Sign Git commit and tags</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit -S<span class="hljs-string">&quot;KEY_ID&quot;</span><br><span class="hljs-comment"># or </span><br>git commit --gpg-sign=KEY_ID<br><br>git tag -u KEY_ID<br></code></pre></td></tr></table></figure><h2 id="Automatic-signing-commits-and-tag"><a href="#Automatic-signing-commits-and-tag" class="headerlink" title="Automatic signing commits and tag"></a>Automatic signing commits and tag</h2><p>First, let Git know the key you are to use and to sign all commits and tags</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.signingkey KEY_ID<br>git config --global commit.gpgsign <span class="hljs-literal">true</span> <br>git config --global tag.gpgSign <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>If you see the following message, it’s due to GPG needs tty information to show dialogue for passphrase</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">error: gpg failed to sign the data<br>fatal: failed to write commit object<br></code></pre></td></tr></table></figure><p>Solution: add environment variable <code>$GPG_TTY</code> to <code>~/.zshrc</code> or <code>~/.bashrc</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> GPG_TTY=$(<span class="hljs-built_in">tty</span>)<br></code></pre></td></tr></table></figure><h1 id="Make-Outgoing-Messages"><a href="#Make-Outgoing-Messages" class="headerlink" title="Make Outgoing Messages"></a>Make Outgoing Messages</h1><h2 id="Sign-document"><a href="#Sign-document" class="headerlink" title="Sign document"></a>Sign document</h2><p>Recipient can verify the message is not forged or damaged. </p><p>Signing data with sender’s private key so that recipient could verify with sender’s public key. </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --clearsign file <span class="hljs-comment"># generate &quot;file.asc&quot;, signed document in ASCII format.</span><br>gpg --sign file <span class="hljs-comment"># generate &quot;file.gpg&quot;, signed document in binary format.</span><br>gpg --detach-sign file <span class="hljs-comment"># generate &quot;file.sig&quot; that contains the signature only.</span><br></code></pre></td></tr></table></figure><p>Use <code>-o-</code> to write to stdout instead of a new file.</p><h2 id="Encrypt-document"><a href="#Encrypt-document" class="headerlink" title="Encrypt document"></a>Encrypt document</h2><p>Recipient is the only one who can read the message.</p><p>Encrypt the document with <strong>recipient’s public key</strong> so that recipient can decrypt it. You need to import recipient’s public key first.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --sign --encrypt --recipient recipient@example.com file<br></code></pre></td></tr></table></figure><h1 id="Verify-Incoming-Message"><a href="#Verify-Incoming-Message" class="headerlink" title="Verify Incoming Message"></a>Verify Incoming Message</h1><h2 id="Verify-signature-from-others"><a href="#Verify-signature-from-others" class="headerlink" title="Verify signature from others"></a>Verify signature from others</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --verify file.gpg <span class="hljs-comment"># signed document</span><br>gpg --verify file.asc <span class="hljs-comment"># clear-signed document</span><br>gpg --verify file.sig file <span class="hljs-comment"># detached signature</span><br></code></pre></td></tr></table></figure><h2 id="Decrypt-document-from-others"><a href="#Decrypt-document-from-others" class="headerlink" title="Decrypt document from others"></a>Decrypt document from others</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gpg --verify --decrypt file.gpg <span class="hljs-comment"># generate `file`</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>privacy &amp; anonymity</category>
      
      <category>opsec</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gpg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Limitation of Java Lambdas</title>
    <link href="/blog/2023/09/07/java-function/"/>
    <url>/blog/2023/09/07/java-function/</url>
    
    <content type="html"><![CDATA[<p>“First-class citizen” function means a function can be dynamically created and be passed around just like any other value. Java 8 added lambda expression that provide  “similar” feature by simplifying the creation of anonymous classes.</p><h1 id="Java-Lambdas"><a href="#Java-Lambdas" class="headerlink" title="Java Lambdas"></a>Java Lambdas</h1><p>Compared to other languages like JavaScript, Python, and C++, Java lambda expressions come with several limitations:</p><ul><li><strong>You can’t use bound variables</strong> (e.g., captured variables in C++ or upvalues in Lua) unless they are declared as <code>final</code>. Therefore, it’s not easy to make closure or higher-order functions.</li><li><strong>You can’t throw checked exceptions</strong>, unless the caller explicitly allows.</li></ul><p>As lambda expressions are compiled as instantiating an anonymous class, apparently the compiler needs to figure out the name of the interface (of the anonymous class), and that interface must have exactly one abstract method. This leads to the most annoying limitation of Java lambdas: <strong>Lambda expression must have an explicit target-type of <code>FunctionalInterface</code></strong>. </p><p>In other languages, you can easily create an anonymous generic function.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Python</span><br>add = <span class="hljs-keyword">lambda</span> x, y: x + y <br><br>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># returns 3</span><br>add(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>) <span class="hljs-comment"># returns 3.0</span><br>add(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment"># returns &#x27;ab&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">x, y</span>) =&gt; x + y;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) # returns <span class="hljs-number">3</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>) # returns <span class="hljs-number">3.0</span><br><span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>) # returns <span class="hljs-string">&#x27;ab&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C++14</span><br><span class="hljs-keyword">auto</span> add = [](<span class="hljs-keyword">auto</span> x, <span class="hljs-keyword">auto</span> y)&#123; <span class="hljs-keyword">return</span> x + y;&#125;;<br><br><span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// returns int(3) </span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>) <span class="hljs-comment">// returns double(3.0)</span><br><span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;foo&quot;</span>s, <span class="hljs-string">&quot;bar&quot;</span>s); <span class="hljs-comment">// returns string(&quot;foobar&quot;)</span><br></code></pre></td></tr></table></figure><p>But in Java you simply can’t do so. <strong>Compiler is unable to infer the type of lambda expression</strong>. It must be specified during declaration. This is probably the only case where a value is not convertible to <code>Object</code>, even <code>var</code> does not work here.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> (x,y) -&gt; x + y; <br><span class="hljs-comment">// error: incompatible types: Object is not a functional interface</span><br><br><span class="hljs-type">var</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> (x,y) -&gt; x + y;<br><span class="hljs-comment">// error: cannot infer type for local variable add</span><br></code></pre></td></tr></table></figure><p>Users have to associate lambda expression with the correct interface so as to inform the compiler the number and types of the arguments and the type of the return value. Standard library kindly provides a few frequently-used <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">functional interfaces</a> to pick from.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">BiFunction&lt;Integer, Integer, Integer&gt; addInteger = (x,y) -&gt; x+y;<br>BiFunction&lt;String, String, String&gt; addString = (x,y) -&gt; x+y; <br></code></pre></td></tr></table></figure><p><strong>You have to enumerate all arguments for lambda types not in the standard library</strong>. For example, to represents a function that accepts four arguments and produces one result, you have to declare the corresponding interface first.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuadFunction</span> &lt;T1, T2, T3, T4, R&gt; &#123;<br>    R <span class="hljs-title function_">apply</span><span class="hljs-params">(T1 t1, T2 t2, T3 t3, T4 t4)</span>;<br>&#125;;<br><br>QuadFunction&lt;String, String, String, String, String&gt; qf = (a,b,c,d)-&gt;a+b+c+d;<br></code></pre></td></tr></table></figure><p>Just think how tedious it could be when there are many arguments.</p><p>On the other hand, <strong>it is a compile-error to convert a lambda into a different functional interface</strong>, even if they represent the same function. For example, a function taking one integer and returning a boolean, can be represented as<br><code>Function&lt;Integer, Boolean&gt;</code> or <code>Predicate&lt;Integer&gt;</code>. But unfortunately these two types are not compatible with each other, because they have different names of their abstract methods.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Function&lt;Integer, Boolean&gt; isZero = x -&gt; x != <span class="hljs-number">0</span>;<br>Predicate&lt;Integer&gt; isZero2 = isZero; <br><span class="hljs-comment">// error: incompatible types: Function&lt;Integer,Boolean&gt; cannot be converted to Predicate&lt;Integer&gt;</span><br><br>Supplier&lt;Child&gt; makeObject = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>();<br>Supplier&lt;Parent&gt; makeObject2 = makeObject;<br><span class="hljs-comment">// error: incompatible types: Supplier&lt;Child&gt; cannot be converted to Supplier&lt;Parent&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="Defined-Interfaces-in-java-util-function"><a href="#Defined-Interfaces-in-java-util-function" class="headerlink" title="Defined Interfaces in java.util.function"></a>Defined Interfaces in <code>java.util.function</code></h1><table><thead><tr><th>Signature</th><th>Name</th><th>Method</th><th>Comment</th></tr></thead><tbody><tr><td><code>T      -&gt; R</code></td><td><code>Function&lt;T, R&gt;</code></td><td><code>apply</code></td><td></td></tr><tr><td><code>()     -&gt; R</code></td><td><code>Supplier&lt;R&gt;</code></td><td><code>get</code></td><td></td></tr><tr><td><code>T      -&gt; boolean</code></td><td><code>Predicate&lt;T&gt;</code></td><td><code>test</code></td><td></td></tr><tr><td><code>T      -&gt; Void</code></td><td><code>Consumer&lt;T&gt;</code></td><td><code>accept</code></td><td></td></tr><tr><td><code>T      -&gt; T</code></td><td><code>UnaryOperator&lt;T&gt;</code></td><td><code>apply</code></td><td></td></tr><tr><td><code>(T, U) -&gt; R</code></td><td><code>BiFunction&lt;T, U, R&gt;</code></td><td><code>apply</code></td><td></td></tr><tr><td><code>(T, U) -&gt; boolean</code></td><td><code>BiPredicate&lt;T, U&gt;</code></td><td><code>test</code></td><td></td></tr><tr><td><code>(T, U) -&gt; Void</code></td><td><code>BiConsumer&lt;T, U&gt;</code></td><td><code>apply</code></td><td></td></tr><tr><td><code>(T, T) -&gt; T</code></td><td><code>BinaryOperator&lt;T&gt;</code></td><td><code>apply</code></td><td></td></tr><tr><td><code>()     -&gt; Void</code></td><td><code>Runnable</code></td><td><code>run</code></td><td>in <code>java.lang</code></td></tr></tbody></table><h1 id="Custom-functional-interfaces"><a href="#Custom-functional-interfaces" class="headerlink" title="Custom functional interfaces"></a>Custom functional interfaces</h1><p>A functional interface must have <em>exactly one</em> non-overriding abstract method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">X1</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>;<br>&#125;;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">X2</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">number</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">X3</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>; <span class="hljs-comment">// This means X3 supertype already has a default implementation</span><br>&#125;;<br><br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">X4</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Apply <code>java.lang.FunctionalInterface</code> annotation so that compiler could check if the interface meets the criteria.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">X5</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func1</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">func2</span><span class="hljs-params">()</span>;<br>&#125; <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">|  Error:</span><br><span class="hljs-comment">|  Unexpected @FunctionalInterface annotation</span><br><span class="hljs-comment">|    X5 is not a functional interface</span><br><span class="hljs-comment">|      multiple non-overriding abstract methods found in interface X5</span><br><span class="hljs-comment">|  @FunctionalInterface</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
