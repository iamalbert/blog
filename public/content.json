{"meta":{"title":"Albert's Blog","subtitle":"隨筆","description":"","author":"Wenlih Chuang","url":"https://iamalbert.github.io/blog","root":"/blog/"},"pages":[],"posts":[{"title":"Managing Python environment with Pyenv","slug":"Managing-Python-environment","date":"2025-01-07T14:47:18.000Z","updated":"2025-01-07T14:47:18.252Z","comments":true,"path":"2025/01/07/Managing-Python-environment/","permalink":"https://iamalbert.github.io/blog/2025/01/07/Managing-Python-environment/","excerpt":"","text":"Install pyenvhttps://github.com/pyenv/pyenv Install dependencies to compile python1234sudo apt install -y libssl-dev gcc make# Optional packagessudo apt install -y libbz2-dev libncurses-dev libreadline-dev libffi-dev libsqlite3-dev liblzma-dev tk-dev Install standalone python versions1pyenv install 3.13 Use virtual envFor example, create a new virtual env call ml 123pyenv virtualenv 3.13 mlpyenv activate mlpyenv deactivate Automatically switch python based on directory1pyenv local ml This will create a file .python-version under current working directory. The content of the file is simply the name of the version (or virtualenv). 1ml","categories":[],"tags":[]},{"title":"Setup WSL and work seaminglessly","slug":"Setup-WSL-and-work-seaminglessly","date":"2024-02-16T10:21:10.000Z","updated":"2024-10-12T06:20:24.044Z","comments":true,"path":"2024/02/16/Setup-WSL-and-work-seaminglessly/","permalink":"https://iamalbert.github.io/blog/2024/02/16/Setup-WSL-and-work-seaminglessly/","excerpt":"","text":"NetworkEdit /etc/wsl.conf and add 12[network]generateResolvConf = false Reboot computer and edit /etc/resolv.conf 12nameserver 9.9.9.9nameserver 1.1.1.1 File systemEdit /etc/wsl.conf and add 1234[automount]enabled = true # C-drive would be mounted to /c, rather than the default /mnt/c. root = / Reference https://learn.microsoft.com/en-us/windows/wsl/wsl-config","categories":[{"name":"programming","slug":"programming","permalink":"https://iamalbert.github.io/blog/categories/programming/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://iamalbert.github.io/blog/tags/windows/"},{"name":"WSL","slug":"WSL","permalink":"https://iamalbert.github.io/blog/tags/WSL/"}]},{"title":"Install Windows11 Without Microsoft Account or Internet Access","slug":"install-windows-11-without-microsoft-account","date":"2023-12-16T14:23:39.000Z","updated":"2024-10-12T06:20:24.044Z","comments":true,"path":"2023/12/16/install-windows-11-without-microsoft-account/","permalink":"https://iamalbert.github.io/blog/2023/12/16/install-windows-11-without-microsoft-account/","excerpt":"","text":"Starting from Windows11, Microsoft require you to connect to Internet and log-in your Microsoft account during installation. To bypass that: Make sure the machine is not conncted to Ethernet. Press Shift + F10 and you should see a CMD terminal pops up. Type oobe\\bypassnro and press Enter. The computer will reboot and restart the installation. This time there would be an “I don’t have Internet” option, and we can create a local account instead of log-in to Microsoft.","categories":[{"name":"privacy & anonymity","slug":"privacy-anonymity","permalink":"https://iamalbert.github.io/blog/categories/privacy-anonymity/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://iamalbert.github.io/blog/tags/windows/"}]},{"title":"Daily Use of GPG","slug":"daily-use-of-gpg","date":"2023-12-16T14:20:16.000Z","updated":"2024-10-12T06:20:24.044Z","comments":true,"path":"2023/12/16/daily-use-of-gpg/","permalink":"https://iamalbert.github.io/blog/2023/12/16/daily-use-of-gpg/","excerpt":"","text":"Prepare GPG keysGenerate new keys1gpg --gen-key Or you can use --full-gen-key to set encryption algorithm, key size, and expiry date. 1gpg --full-gen-key Sample output 12345678910111213141516171819Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) (14) Existing key from cardYour selection? 1RSA keys may be between 1024 and 4096 bits long.What keysize do you want? (3072)Requested keysize is 3072 bitsPlease specify how long the key should be valid. 0 = key does not expire &lt;n&gt; = key expires in n days &lt;n&gt;w = key expires in n weeks &lt;n&gt;m = key expires in n months &lt;n&gt;y = key expires in n yearsKey is valid for? (0) 0Key does not expire at allIs this correct? (y/N) y List all keys1gpg --list-key --keyid-format long Sample Output 1234567/home/user/.gnupg/pubring.kbx----------------------------pub rsa3072/84C9694F05E46BFA 2023-12-16 [SC] ^^^^^^^^^^^^^^^^ This is key ID 8A4111386A906867172C760684C9694F05E46BFAuid [ultimate] Firstname Lastname (comment) &lt;example@gmail.com&gt;sub rsa3072/B848B278A951A079 2023-12-16 [E] Backup keys1gpg --armor --export-options backup --export-secret-keys KEY_ID_OR_EMAIL &gt; private.gpg Options are --armor to output ASCII-based keys instead of binary format --export-options backup to include meta data like ownertrust, signature, and user attributes. Import keys from backup1234$ gpg --import-options restore --import private.gpg$ gpg --edit-key your@id.heregpg&gt; trustYour decision? 5 Share public key with othersSome people post their public keys on their website. Some place it under &lt;domain&gt;/.well-known/security.txt or &lt;domain&gt;/security.txt. Export your key12345678$ gpg --armor --export email@example.com-----BEGIN PGP PUBLIC KEY BLOCK-----6HV8Q6put7QEsRjBq89z3Eh+H9XLBz9GXpGBs2J6C3gu2+hBzgagNxfJeMP45zJimQGNBGVQYHkBDADF1JkfvUEeZxp+dKxRpAELB7uAjOqkf305twVozoMv3ky76jqW...-----END PGP PUBLIC KEY BLOCK----- Import keys of others1gpg --import public.gpg Use with GitSign Git commit and tags12345git commit -S&quot;KEY_ID&quot;# or git commit --gpg-sign=KEY_IDgit tag -u KEY_ID Automatic signing commits and tagFirst, let Git know the key you are to use and to sign all commits and tags 123git config --global user.signingkey KEY_IDgit config --global commit.gpgsign true git config --global tag.gpgSign true If you see the following message, it’s due to GPG needs tty information to show dialogue for passphrase 12error: gpg failed to sign the datafatal: failed to write commit object Solution: add environment variable $GPG_TTY to ~/.zshrc or ~/.bashrc 1export GPG_TTY=$(tty) Make Outgoing MessagesSign documentRecipient can verify the message is not forged or damaged. Signing data with sender’s private key so that recipient could verify with sender’s public key. 123gpg --clearsign file # generate &quot;file.asc&quot;, signed document in ASCII format.gpg --sign file # generate &quot;file.gpg&quot;, signed document in binary format.gpg --detach-sign file # generate &quot;file.sig&quot; that contains the signature only. Use -o- to write to stdout instead of a new file. Encrypt documentRecipient is the only one who can read the message. Encrypt the document with recipient’s public key so that recipient can decrypt it. You need to import recipient’s public key first. 1gpg --sign --encrypt --recipient recipient@example.com file Verify Incoming MessageVerify signature from others123gpg --verify file.gpg # signed documentgpg --verify file.asc # clear-signed documentgpg --verify file.sig file # detached signature Decrypt document from others1gpg --verify --decrypt file.gpg # generate `file`","categories":[{"name":"privacy & anonymity","slug":"privacy-anonymity","permalink":"https://iamalbert.github.io/blog/categories/privacy-anonymity/"},{"name":"opsec","slug":"privacy-anonymity/opsec","permalink":"https://iamalbert.github.io/blog/categories/privacy-anonymity/opsec/"}],"tags":[{"name":"gpg","slug":"gpg","permalink":"https://iamalbert.github.io/blog/tags/gpg/"}]},{"title":"Limitation of Java Lambdas","slug":"java-function","date":"2023-09-07T22:42:06.000Z","updated":"2024-10-12T06:20:24.044Z","comments":true,"path":"2023/09/08/java-function/","permalink":"https://iamalbert.github.io/blog/2023/09/08/java-function/","excerpt":"","text":"“First-class citizen” function means a function can be dynamically created and be passed around just like any other value. Java 8 added lambda expression that provide “similar” feature by simplifying the creation of anonymous classes. Java LambdasCompared to other languages like JavaScript, Python, and C++, Java lambda expressions come with several limitations: You can’t use bound variables (e.g., captured variables in C++ or upvalues in Lua) unless they are declared as final. Therefore, it’s not easy to make closure or higher-order functions. You can’t throw checked exceptions, unless the caller explicitly allows. As lambda expressions are compiled as instantiating an anonymous class, apparently the compiler needs to figure out the name of the interface (of the anonymous class), and that interface must have exactly one abstract method. This leads to the most annoying limitation of Java lambdas: Lambda expression must have an explicit target-type of FunctionalInterface. In other languages, you can easily create an anonymous generic function. 123456# Pythonadd = lambda x, y: x + y add(1, 2) # returns 3add(1.0, 2.0) # returns 3.0add(&#x27;a&#x27;, &#x27;b&#x27;) # returns &#x27;ab&#x27; 12345const add = (x, y) =&gt; x + y;add(1, 2) # returns 3add(1.0, 2.0) # returns 3.0add(&#x27;a&#x27;, &#x27;b&#x27;) # returns &#x27;ab&#x27; 123456// C++14auto add = [](auto x, auto y)&#123; return x + y;&#125;;add(1, 2); // returns int(3) add(1.0, 2.0) // returns double(3.0)add(&quot;foo&quot;s, &quot;bar&quot;s); // returns string(&quot;foobar&quot;) But in Java you simply can’t do so. Compiler is unable to infer the type of lambda expression. It must be specified during declaration. This is probably the only case where a value is not convertible to Object, even var does not work here. 12345Object add = (x,y) -&gt; x + y; // error: incompatible types: Object is not a functional interfacevar add = (x,y) -&gt; x + y;// error: cannot infer type for local variable add Users have to associate lambda expression with the correct interface so as to inform the compiler the number and types of the arguments and the type of the return value. Standard library kindly provides a few frequently-used functional interfaces to pick from. 12BiFunction&lt;Integer, Integer, Integer&gt; addInteger = (x,y) -&gt; x+y;BiFunction&lt;String, String, String&gt; addString = (x,y) -&gt; x+y; You have to enumerate all arguments for lambda types not in the standard library. For example, to represents a function that accepts four arguments and produces one result, you have to declare the corresponding interface first. 12345public interface QuadFunction &lt;T1, T2, T3, T4, R&gt; &#123; R apply(T1 t1, T2 t2, T3 t3, T4 t4);&#125;;QuadFunction&lt;String, String, String, String, String&gt; qf = (a,b,c,d)-&gt;a+b+c+d; Just think how tedious it could be when there are many arguments. On the other hand, it is a compile-error to convert a lambda into a different functional interface, even if they represent the same function. For example, a function taking one integer and returning a boolean, can be represented asFunction&lt;Integer, Boolean&gt; or Predicate&lt;Integer&gt;. But unfortunately these two types are not compatible with each other, because they have different names of their abstract methods. 12345678Function&lt;Integer, Boolean&gt; isZero = x -&gt; x != 0;Predicate&lt;Integer&gt; isZero2 = isZero; // error: incompatible types: Function&lt;Integer,Boolean&gt; cannot be converted to Predicate&lt;Integer&gt;Supplier&lt;Child&gt; makeObject = () -&gt; new Child();Supplier&lt;Parent&gt; makeObject2 = makeObject;// error: incompatible types: Supplier&lt;Child&gt; cannot be converted to Supplier&lt;Parent&gt; Defined Interfaces in java.util.function Signature Name Method Comment T -&gt; R Function&lt;T, R&gt; apply () -&gt; R Supplier&lt;R&gt; get T -&gt; boolean Predicate&lt;T&gt; test T -&gt; Void Consumer&lt;T&gt; accept T -&gt; T UnaryOperator&lt;T&gt; apply (T, U) -&gt; R BiFunction&lt;T, U, R&gt; apply (T, U) -&gt; boolean BiPredicate&lt;T, U&gt; test (T, U) -&gt; Void BiConsumer&lt;T, U&gt; apply (T, T) -&gt; T BinaryOperator&lt;T&gt; apply () -&gt; Void Runnable run in java.lang Custom functional interfacesA functional interface must have exactly one non-overriding abstract method. 12345678910111213141516171819202122232425public interface X1 &#123; void func();&#125;;public interface X2 &#123; void func(); int number()&#123; return 1; &#125;&#125;;@FunctionalInterfacepublic interface X3 &#123; void func(); @Override String toString(); // This means X3 supertype already has a default implementation&#125;;@FunctionalInterfacepublic interface X4 &#123; void func();&#125; Apply java.lang.FunctionalInterface annotation so that compiler could check if the interface meets the criteria. 123456789101112@FunctionalInterfacepublic interface X5 &#123; void func1(); void func2();&#125; /*| Error:| Unexpected @FunctionalInterface annotation| X5 is not a functional interface| multiple non-overriding abstract methods found in interface X5| @FunctionalInterface*/","categories":[{"name":"programming","slug":"programming","permalink":"https://iamalbert.github.io/blog/categories/programming/"}],"tags":[{"name":"java","slug":"java","permalink":"https://iamalbert.github.io/blog/tags/java/"}]}],"categories":[{"name":"programming","slug":"programming","permalink":"https://iamalbert.github.io/blog/categories/programming/"},{"name":"privacy & anonymity","slug":"privacy-anonymity","permalink":"https://iamalbert.github.io/blog/categories/privacy-anonymity/"},{"name":"opsec","slug":"privacy-anonymity/opsec","permalink":"https://iamalbert.github.io/blog/categories/privacy-anonymity/opsec/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://iamalbert.github.io/blog/tags/windows/"},{"name":"WSL","slug":"WSL","permalink":"https://iamalbert.github.io/blog/tags/WSL/"},{"name":"gpg","slug":"gpg","permalink":"https://iamalbert.github.io/blog/tags/gpg/"},{"name":"java","slug":"java","permalink":"https://iamalbert.github.io/blog/tags/java/"}]}